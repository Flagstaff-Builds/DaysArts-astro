---
import Layout from "../layouts/Layout.astro";
import Main from "@components/html-structure/Main.astro";
import MovieList from "@components/movie/MovieList.astro";
import HeroSecondary from "@components/hero-secondary.astro";
import TheatreClosed from "@/components/theatre-closed.astro";
import { VideoCameraIcon } from '@heroicons/vue/24/outline';
import { getMovies } from "@/utils/appwrite";

// Fetch movies from Appwrite
const movies = await getMovies();

// Function to normalize dates to start of day for comparison
function normalizeDate(date: Date): Date {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}

// Filter and sort movies
const movieEntries = movies
  .filter(movie => {
    // Keep movie if it has any showings today or in the future
    const today = normalizeDate(new Date());
    return movie.showTimes?.some(showtime => 
      normalizeDate(new Date(showtime)) >= today
    ) ?? false;
  })
  .sort((a, b) => {
    const aTime = a.showTimes[0] ? new Date(a.showTimes[0]) : new Date(0);
    const bTime = b.showTimes[0] ? new Date(b.showTimes[0]) : new Date(0);
    return aTime.getTime() - bTime.getTime();
  })
  .map(movie => ({
    // Transform Appwrite movie data to match the expected format
    data: {
      title: movie.title,
      poster: movie.posterUrl,
      description: movie.description,
      cast: movie.cast,
      rating: movie.rating,
      length: movie.runtime ? `${movie.runtime}m` : undefined,
      genre: movie.genre,
      trailer: movie.trailerUrl,
      showtimes: movie.showTimes.map(st => {
        const date = new Date(st);
        const dateStr = date.toLocaleDateString('en-US', { 
          month: 'short',
          day: 'numeric'
        });
        const timeStr = date.toLocaleTimeString('en-US', {
          hour: 'numeric',
          minute: 'numeric',
          hour12: true
        });
        return {
          date: dateStr,
          time: timeStr
        };
      }),
      reelAlternative: movie.isReelAlternative
    },
    id: movie.$id,
    slug: movie.title.toLowerCase().replace(/\s+/g, '-')
  }));

let hasMovies = movieEntries && movieEntries.length > 0;
---

<Layout title="Now playing at Daysland Theatre">
  <!-- HeroSecondary text structure
    title case
    sentence case
    sentence case
  -->
  <HeroSecondary
    tagline="Experience Adventure"
    title="Now playing"
    content="Dive into our latest cinematic adventure">
    <VideoCameraIcon slot="icon" class="h-10" />
  </HeroSecondary>

  <Main>
    {hasMovies ? (
      <MovieList movieEntries={movieEntries} />
    ) : (
      <TheatreClosed />
    )}
  </Main>
</Layout>